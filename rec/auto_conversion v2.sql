use master
go
declare @print int = 2

declare @xml_table  table (id int identity(1,1), xml_value nvarchar(max), hex_value varchar(max), identify varchar(100))
declare @xml_result table (id int,				 xml_value nvarchar(max), hex_value varchar(max), identify varchar(100), desc_identify int) 
declare @hex_record varchar(max), @xmlrecord nvarchar(max)
--set nocount on
--set @hex_record = dfff01b004f00372006f007700ef000001f801f00573007000610063006500f02468007400740070003a002f002f007700770077002e00770033002e006f00720067002f0058004d004c002f0031003900390038002f006e0061006d00650073007000610063006500f00378006d006c00ef030402f602110870007200650073006500720076006500f00269006400ef000005f603110f300030003700310030003000370033003700360034003000300030003800f5f00263003100ef000006f804110831003000300037003300370036003400f7f00263003200ef000007f80511043100300031003200f7f00263003300ef000008f8061115540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00f7f806f0016d00ef000009f60711013200f5111137062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003400ef00000af8081115540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00f7f808f60711013200f5111137062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003500ef00000bf8091115540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00f7f809f60711013200f5111137062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003700ef00000cf80a110254005200f7f00263003800ef00000df80b1103530041005200f7f00263003900ef00000ef80c11013100f7f003630031003100ef00000ff80d11073200360033003300300034003000f7f003630032003000ef000010f80ef7f80ef60711013600f5110f430043005300370030003000300030003000360030003900340035003200f7f003630032003100ef000011f80f110239003900f7f003630034003600ef000012f810110832003000320033003000320032003800f7f810f60711013200f5110832003000320032003100320033003100f7f810f60711013300f5110832003000320032003100310033003000f7f810f60711013400f5110832003000320032003100300033003100f7f810f60711013500f5110832003000320032003000390033003000f7f810f60711013600f5110832003000320032003000380033003100f7f810f60711013700f5110832003000320032003000370033003100f7f810f60711013800f5110832003000320032003000360033003000f7f003630034003700ef000013f811110832003000320033003000310030003100f7f811f60711013200f5110832003000320032003100320030003100f7f811f60711013300f5110832003000320032003100310030003100f7f811f60711013400f5110832003000320032003100300030003100f7f811f60711013500f5110832003000320032003000390030003100f7f811f60711013600f5110832003000320032003000380030003100f7f811f60711013700f5110832003000320032003000370030003100f7f003630034003800ef000014f812110832003000320033003000310030003100f7f812f60711013200f5110832003000320032003100320030003100f7f812f60711013300f5110832003000320032003100310030003100f7f812f60711013400f5110832003000320032003100300030003100f7f812f60711013500f5110832003000320032003000390030003100f7f812f60711013600f5110832003000320032003000380030003100f7f812f60711013700f5110832003000320032003000370030003100f7f003630034003900ef000015f813110832003000320033003000310030003100f7f813f60711013200f5110832003000320032003100320030003100f7f813f60711013300f5110832003000320032003100310030003100f7f813f60711013400f5110832003000320032003100300030003100f7f813f60711013500f5110832003000320032003000390030003100f7f813f60711013600f5110832003000320032003000380030003100f7f813f60711013700f5110832003000320032003000370030003100f7f003630035003000ef000016f814110832003000320033003000310030003100f7f814f60711013200f5110832003000320032003100320030003100f7f814f60711013300f5110832003000320032003100310030003100f7f814f60711013400f5110832003000320032003100300030003100f7f814f60711013500f5110832003000320032003000390030003100f7f814f60711013600f5110832003000320032003000380030003100f7f814f60711013700f5110832003000320032003000370030003100f7f003630037003600ef000017f81511024e004f00f7f003630037003800ef000018f816110832003000320032003000360031003800f7f003630038003500ef000019f81711043100300031003200f7f003630039003300ef00001af8181103530041005200f7f003630039003400ef00001bf81911013100f7f003630039003500ef00001cf81a1103530041005200f7f003630039003600ef00001df81b11013100f7f003630039003900ef00001ef81c110242004d00f7f81cf60711013200f5110943004c004e0054002e0043004f0044004500f7f81cf60711013300f511044900420041004e00f7f0046300310030003000ef00001ff81df7f81df60711013300f51118530041003700360031003500300030003000300031003700310030003000370033003700360034003000300030003900f7f0046300310030003800ef000020f81e11024e004f00f7f0046300310034003100ef000021f81f11024e004f00f7f0046300320034003800ef000022f82011013200f7f0046300320034003900ef000023f8211129330033003300310039005f0049004e005000550054005400450052005f0049005f0049004e00410055005f004f00460053005f0043004c004f00530045002e005300550042002e0041004300430054005300f7f821f60711013200f51119330033003000300033005f0043004f004e0056002e004100430043004f0055004e0054002e00320030003100370030003600f7f0046300320035003000ef000024f822110a3200320030003800300039003100360031003400f7f822f60711013200f5110a3200320030003800300039003100360031003400f7f0046300320035003100ef000025f8231122330033003300310039005f0049004e005000550054005400450052005f004f00460053005f0043004c004f00530045002e005300550042002e0041004300430054005300f7f0046300320035003200ef000026f8241109530041003000300031003000300030003700f7f0046300320035003300ef000027f8251103390039003900f7f7
set @hex_record = dfff01b004f00372006f007700ef000001f801f00573007000610063006500f02468007400740070003a002f002f007700770077002e00770033002e006f00720067002f0058004d004c002f0031003900390038002f006e0061006d00650073007000610063006500f00378006d006c00ef030402f602110870007200650073006500720076006500f00269006400ef000005f603110831003000300030003000310037003700f5f00263003100ef000006f8041109430031003000300030003000310037003700f7f00263003200ef000007f805110a530048004f005200540020004e0041004d004500f7f805f0016d00ef000008f60611013200f5110d2706440627063306450620002706440645062e062a0635063106f7f00263003300ef000009f807110a530048004f005200540020004e0041004d004500f7f807f60611013200f5110d2706440627063306450620002706440645062e062a0635063106f7f00263003400ef00000af808110a530048004f005200540020004e0041004d004500f7f808f60611013200f5110d2706440627063306450620002706440645062e062a0635063106f7f00263003500ef00000bf809110b54004500530054004100440044005200450053005300f7f00263003700ef00000cf80a1106520049005900410044004800f7f00263003800ef00000df80b11043100310031003100f7f003630032003300ef00000ef80c11043600320032003000f7f003630032003400ef00000ff80d11073500350035003100310034003000f7f003630032003600ef000010f80e11043900390039003900f7f003630032003700ef000011f80f11013100f7f003630032003800ef000012f810110253004100f7f003630032003900ef000013f811110239003900f7f003630033003000ef000014f812110253004100f7f003630033003400ef000015f813110a3100330031003300350033003800310038003100f7f003630034003200ef000016f814110831003900380030003000380030003700f7f003630034003500ef000017f81511013200f7f003630034003600ef000018f816110232003000f7f003630034003800ef000019f8171109530041003000300031003000300030003100f7f003630035003100ef00001af8181103590045005300f7f003630035003200ef00001bf81911024e004f00f7f003630036003200ef00001cf81a110a530048004f005200540020004e0041004d004500f7f003630036003500ef00001df81b1106530049004e0047004c004500f7f003630037003200ef00001ef81c11013200f7f003630039003400ef00001ff81d110a3100330031003300350033003800310038003100f7f0046300310033003300ef000020f81e11044e0055004c004c00f7f0046300310033003400ef000021f81f11044e0055004c004c00f7f0046300310033003700ef000022f82011044e0055004c004c00f7f0046300310033003800ef000023f82111044e0055004c004c00f7f0046300310035003500ef000024f822110430002e0031003000f7f822f60611013200f5110430002e0031003000f7f0046300310037003900ef000025f82311013300f7f823f60611013200f511013000f7f823f60611013300f511013100f7f823f60611013400f5110531003100340036003100f7f823f60611013600f5110832003000310033003000380031003400f7f823f60611013700f511014d00f7f823f60611013800f511015300f7f823f606110231003000f5110b54004500530054004100440044005200450053005300f7f823f606110231003100f511082706440646062706350631064a062906f7f823f606110231003200f5110c390036003600350030003000300030003000300030003000f7f823f606110231003300f5110c390036003600350030003000300030003000300030003000f7f823f606110231003500f51119740065007300740065006d00610069006c004000620061006e006b0061006c00620069006c00610064002e0063006f006d00f7f823f606110232003400f5110a530048004f005200540020004e0041004d004500f7f823f606110232003500f51116480632062706310629062000270644062a06310628064a06290620004806270644062a06390644064a064506f7f823f606110232003600f511044506390644064506f7f823f606110232003800f5110b54004500530054004100440044005200450053005300f7f823f606110232003900f51106520049005900410044004800f7f823f606110233003000f5110b54004500530054004100440044005200450053005300f7f823f606110233003100f5110c390036003600350030003000300030003000300030003000f7f823f606110233003200f511043900360036003500f7f823f606110233003500f511013500f7f823f606110233003700f511043600350030003000f7f823f606110233003800f5110536003000300030003000f7f823f606110234003300f5110536003000300030003000f7f823f606110234003400f511015200f7f823f606110234003500f511014f00f7f823f606110234003600f511015900f7f823f606110234003700f5110231003000f7f823f606110234003700f0017300ef000026f62411013200f5110234003500f7f823f606110234003700f62411013300f5f7f823f606110234003800f5111b2a062d0648064a0644062000310627062a06280620002d0020003506460627062f064a0642062000270633062a062b06450627063106f7f823f606110234003800f62411013200f5110e3506460627062f064a0642062000270633062a062b06450627063106f7f823f606110234003800f62411013300f5f7f823f606110234003900f51106310032003300310032003300f7f823f606110235003000f511013100f7f823f606110235003100f511074500300030003100340039003800f7f823f606110235003200f5110832003000300036003000390030003300f7f823f606110236003100f51106520049005900410044004800f7f823f606110236003200f511013100f7f823f606110236003600f5110531003100340036003100f7f823f606110237003100f5110832003000300035003000390030003700f7f823f606110237003600f5110831003400330034003100300030003700f7f823f606110237003700f5110831003400300030003000390032003600f7f823f606110238003100f5111332003000310030002d00300033002d00310031002000300033003a00300035003a0032003800f7f823f606110238003200f5110249004e00f7f823f606110238003300f51103490056005200f7f823f606110238003400f5110832003000300038003000310030003100f7f823f606110239003100f5110a530048004f005200540020004e0041004d004500f7f823f606110239003100f62411013200f5110d2706440627063306450620002706440645062e062a0635063106f7f823f606110239003200f5110a530048004f005200540020004e0041004d004500f7f823f606110239003200f62411013200f5110d2706440627063306450620002706440645062e062a0635063106f7f823f6061103310032003700f5110253004100f7f823f6061103310032003800f5110231003200f7f823f6061103310033003200f511013100f7f823f6061103310033003300f5112549006e0069007400690061006c00200043007500730074006f006d0065007200730020005200690073006b002000430061007400650067006f00720069007a006100740069006f006e00f7f823f6061103310033003400f5110832003000310034003000390032003300f7f823f6061103310033003500f5110b530059005300540045004d0020005500530045005200f7f823f6061103310033003800f511013100f7f823f6061103310033003900f511013100f7f823f6061103310034003200f5110a3100330031003300350033003800310038003100f7f823f6061103310034003600f5110831003400330034003100300030003700f7f823f6061103310034003700f5110832003000310033003000380031003400f7f0046300310038003000ef000027f82511205400520041004e00530041004300540049004f004e00200050004f00530054004500440020005300550043004300450053005300460055004c004c0059007d00f7f0046300310038003200ef000028f82611013700f7f0046300310038003300ef000029f8271110330033003000390039005f0045003000300033003100300038005f0041005f00f7f827f60611013200f51110330033003000340037005f0045003000300033003100300038005f0041005f00f7f827f60611013300f5110f330033003000350039005f004700540055005300450052005f0041005f00f7f827f60611013400f5111d370038005f004f00460053002e0055005300450052005f0049005f0049004e00410055005f004f00460053005f0047004c004f00420055005300f7f0046300310038003400ef00002af828110a3200310031003200300036003100350031003000f7f828f60611013200f5110a3200300030003400310035003100300030003500f7f828f60611013300f5110a3100380030003900320037003100340030003200f7f828f60611013400f5110a3100330031003100310033003000350030003900f7f828f60611013500f5110a3100330031003100310033003000350030003900f7f0046300310038003500ef00002bf8291116370038005f004f00460053002e0055005300450052005f004f00460053005f0047004c004f00420055005300f7f0046300310038003600ef00002cf82a1109530041003000300031003000300030003100f7f0046300310038003700ef00002df82b1103390039003900f7f7

--dfff01b004
--f0 03 72006f007700
--ef000001f801f0 05 73007000610063006500
--f0 24 68007400740070003a002f002f007700770077002e00770033002e006f00720067002f0058004d004c002f0031003900390038002f006e0061006d00650073007000610063006500
--f0 03 78006d006c00
--ef030402f60211 08 70007200650073006500720076006500
--f0 02 69006400
--ef000005f60311 0f 300030003700310030003000370033003700360034003000300030003800
--f5f0 02 63003100
--ef000006f80411 08 31003000300037003300370036003400
--f7f0 02 63003200
--ef000007f80511 04 3100300031003200
--f7f0 02 63003300
--ef000008f80611 15 540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00
--f7f806f0 01 6d00
--ef000009f60711 01 3200
--f511 11 37062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003400
--ef00000af80811 15 540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00
--f7f808f60711 01 3200
--f5111137062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003500ef00000bf8091115540041005200490051002000570041005a00490052002000480041004a00490020004b00480041004e00f7f809f60711013200f5111137062706310642062000480632064a06310620002d0627062c0620002e0627064606f7f00263003700ef00000cf80a110254005200f7f00263003800ef00000df80b1103530041005200f7f00263003900ef00000ef80c11013100f7f003630031003100ef00000ff80d11073200360033003300300034003000f7f003630032003000ef000010f80ef7f80ef60711013600f5110f430043005300370030003000300030003000360030003900340035003200f7f003630032003100ef000011f80f110239003900f7f003630034003600ef000012f810110832003000320033003000320032003800f7f810f60711013200f5110832003000320032003100320033003100f7f810f60711013300f5110832003000320032003100310033003000f7f810f60711013400f5110832003000320032003100300033003100f7f810f60711013500f5110832003000320032003000390033003000f7f810f60711013600f5110832003000320032003000380033003100f7f810f60711013700f5110832003000320032003000370033003100f7f810f60711013800f5110832003000320032003000360033003000f7f003630034003700ef000013f811110832003000320033003000310030003100f7f811f60711013200f5110832003000320032003100320030003100f7f811f60711013300f5110832003000320032003100310030003100f7f811f60711013400f5110832003000320032003100300030003100f7f811f60711013500f5110832003000320032003000390030003100f7f811f60711013600f5110832003000320032003000380030003100f7f811f60711013700f5110832003000320032003000370030003100f7f003630034003800ef000014f812110832003000320033003000310030003100f7f812f60711013200f5110832003000320032003100320030003100f7f812f60711013300f5110832003000320032003100310030003100f7f812f60711013400f5110832003000320032003100300030003100f7f812f60711013500f5110832003000320032003000390030003100f7f812f60711013600f5110832003000320032003000380030003100f7f812f60711013700f5110832003000320032003000370030003100f7f003630034003900ef000015f813110832003000320033003000310030003100f7f813f60711013200f5110832003000320032003100320030003100f7f813f60711013300f5110832003000320032003100310030003100f7f813f60711013400f5110832003000320032003100300030003100f7f813f60711013500f5110832003000320032003000390030003100f7f813f60711013600f5110832003000320032003000380030003100f7f813f60711013700f5110832003000320032003000370030003100f7f003630035003000ef000016f814110832003000320033003000310030003100f7f814f60711013200f5110832003000320032003100320030003100f7f814f60711013300f5110832003000320032003100310030003100f7f814f60711013400f5110832003000320032003100300030003100f7f814f60711013500f5110832003000320032003000390030003100f7f814f60711013600f5110832003000320032003000380030003100f7f814f60711013700f5110832003000320032003000370030003100f7f003630037003600ef000017f81511024e004f00f7f003630037003800ef000018f816110832003000320032003000360031003800f7f003630038003500ef000019f81711043100300031003200f7f003630039003300ef00001af8181103530041005200f7f003630039003400ef00001bf81911013100f7f003630039003500ef00001cf81a1103530041005200f7f003630039003600ef00001df81b11013100f7f003630039003900ef00001ef81c110242004d00f7f81cf60711013200f5110943004c004e0054002e0043004f0044004500f7f81cf60711013300f511044900420041004e00f7f0046300310030003000ef00001ff81df7f81df60711013300f51118530041003700360031003500300030003000300031003700310030003000370033003700360034003000300030003900f7f0046300310030003800ef000020f81e11024e004f00f7f0046300310034003100ef000021f81f11024e004f00f7f0046300320034003800ef000022f82011013200f7f0046300320034003900ef000023f8211129330033003300310039005f0049004e005000550054005400450052005f0049005f0049004e00410055005f004f00460053005f0043004c004f00530045002e005300550042002e0041004300430054005300f7f821f60711013200f51119330033003000300033005f0043004f004e0056002e004100430043004f0055004e0054002e00320030003100370030003600f7f0046300320035003000ef000024f822110a3200320030003800300039003100360031003400f7f822f60711013200f5110a3200320030003800300039003100360031003400f7f0046300320035003100ef000025f8231122330033003300310039005f0049004e005000550054005400450052005f004f00460053005f0043004c004f00530045002e005300550042002e0041004300430054005300f7f0046300320035003200ef000026f8241109530041003000300031003000300030003700f7f0046300320035003300ef000027f8251103390039003900f7f7

declare @pos bigint
declare @xml_value nvarchar(max), @hex_value varchar(max)
declare @xml nvarchar(max) 
set @xml = substring(@hex_record,charindex(dfff01,@hex_record), len(@hex_record))
select @xml = substring(@xml, 11, len(@xml))

declare @pos1 bigint, @pos2 bigint, @ident varchar(100)
while @xml not like f7f7%
begin
--select @pos1 , @pos2, @xml_value, @ident 

select @pos1 = master.dbo.fn_pos(substring(@xml,1,24),1), @pos2 = master.dbo.fn_pos(substring(@xml,1,24),2)
select @hex_value = 
			   case 
			   when substring(@xml,1,2) in (f0,f5,f6,f7,f8,11) then substring(@xml, @pos1, @pos2 * 4) 
			   when substring(@xml,1,2) in (ef)						   then case when @pos2 = 0 then N else substring(@xml,17,master.dbo.Hex_to_Decimal(substring(@xml, 15, 2)) * 4) end
			   end

select @xml_value = 
			   isnull(replace(replace(replace(replace(replace(master.dbo.Hex_to_Text_NCHar(upper(case 
			   when substring(@xml,1,2) in (f0,f5,f6,f7,f8,11) then substring(@xml, @pos1, @pos2 * 4) 
			   when substring(@xml,1,2) in (ef)						   then case when @pos2 = 0 then N else substring(@xml,17,master.dbo.Hex_to_Decimal(substring(@xml, 15, 2)) * 4) end
			   end)),N&,N&amp;),N<,N&lt;),N>,N&gt;),N,N&apos;),N",N&quot;),)

set @ident = case when @pos2 = 0 then Nff else case when charindex(11, substring(@xml,1,14)) = 0 and substring(@xml, 1,2) = ef then substring(@xml,1,@pos1) else substring(@xml,1,@pos1+1-4) end end

select @xml =  case 
			   when substring(@xml,1,2) in (f0,f5,f6,f7,f8,11) then substring(@xml, @pos1 + (@pos2 * 4), len(@xml))
			   when substring(@xml,1,2) in (ef)						   then case when @pos2 = 0 then substring(@xml, 13, len(@xml)) else substring(@xml, 17 + (master.dbo.Hex_to_Decimal(substring(@xml, 15, 2)) * 4), len(@xml)) end
			   end
--select @xml, @xml_value, @ident
insert into @xml_table (xml_value, hex_value, identify) values (@xml_value, @hex_value,@ident)
--insert into xml_table2 (xml_value, hex_value, identify) values (@xml_value, @hex_value,@ident)
end

insert into @xml_result 
select 
*, 
case 
when identify in   (f5f0,f7f0,f5f7f0)																	then 1  -- Tag
--when identify like  ef000%	and identify not like %f60611 and identify not like %f60511 and identify not like %f6%11	then 2 -- Tag Value 
when identify like ef%f8%11 and (identify not like %f6%11 and len(identify) != 6) or (identify = ff)	then 2 -- Tag Value 
when (identify like f7f8% and len(identify) = 8) or (identify like ef%f0 and len(identify) = 14) then 3  -- Letter Identifier 
--when identify like  %f60611	or identify like ef00%f60511	or identify like f7f8%f60511		then 4  -- Equal no 
when (identify like  %f7f8%f6%11and len(identify) in (12,14) and identify not in (f511,f0)) 
  or ((select case when (identify like f7f8% and len(identify) in (8,12)) or (identify like ef%f0 and len(identify) = 14) then 3 else 0 end is_3 from @xml_table where id = (xt.id-1)) =  3  and identify not in (f511,f0)) then 4  -- Equal no 
when identify like  f511																			then 5  -- Inside Value 
when identify in   (f0)		and id > 8															then 6  -- Letter Identifier 2 
when identify like  %f6%11 and len(identify) in (6,14)
and ((select case when (identify like f7f8% and len(identify) = 8) or (identify like ef%f0 and len(identify) = 14) then 3 else 0 end is_3 from @xml_table where id = (xt.id-1)) !=  3)
or (identify like  f6%11 and len(identify) in (6)) then 7  -- Inside Value 2

else 0
end desc_identify
from @xml_table xt
where xml_value is not null
order by id

if @print = 1
begin
select *, len(identify) from @xml_result --where desc_identify in (3,4,7) --order by desc_identify, id
end
else 
if @print = 2
begin

select id, xml_value, identify, desc_identify, col_id, id_3, id_4, id_33, id_44, missing_5, id_3_7, id_4_7, id_33_7, id_44_7, missing_5_4, id_3_4, id_4_4,--missing_2,
case 
when id = 1 then <+xml_value+case when (select id from @xml_result where xml_value = id and id < 8) = 2 then  +col_id+ xml:space="preserve" else  xml:space="preserve" +col_id end +>
when id = 10000 then </+xml_value+>
when desc_identify = 2  then case when identify = ff then <+col_id+ /> else <+col_id+>+xml_value+</+col_id+> end
when desc_identify = 5  then <+col_id+ +isnull(id_3+="+id_4+",)+ +isnull(id_33+="+id_44+",)+>+xml_value+</+col_id+>
when missing_5 = 0      then <+col_id+ +isnull(id_3_7+="+id_4_7+",)+ +isnull(id_33_7+="+id_44_7+",)+/>
when missing_5_4 = 0    then <+col_id+ +isnull(id_3_4+="+id_4_4+",)+/>
end
from (
select
id, xml_value, identify, desc_identify, 
case 
when id = 1			   then id="+(select xml_value from @xml_result where id in (select id + 1 from @xml_result where xml_value = id and id < 8))+"
when desc_identify = 1 then 
when desc_identify = 2 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 3 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 4 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 5 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 6 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
end col_id,
case desc_identify 
when 5 then (select xml_value from @xml_result where id in (isnull((select max(id) id from @xml_result where id < xt.id and desc_identify = 4),(select max(id) id from @xml_result where id < xt.id and desc_identify = 2))))
end id_4,
case desc_identify 
when 5 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3,
case when desc_identify = 5 and (select desc_identify from @xml_result where id = (xt.id-1)) = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where desc_identify = 6))
end id_33,
case when desc_identify = 5 then (select xml_value from @xml_result where id = (xt.id-1) and desc_identify = 7)
end id_44,
case when desc_identify in (7) then case when (select desc_identify from @xml_result where id = (xt.id+1)) != 5 then 0 else 1 end
end missing_5,
case desc_identify 
when 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 4))
end id_4_7,
case desc_identify 
when 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3_7,
case when desc_identify = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where desc_identify = 6))
end id_33_7,
case when desc_identify = 7 then xml_value 
end id_44_7,
case when desc_identify in (4) then case when (select desc_identify from @xml_result where id = (xt.id+1)) not in (5,6,7) then 0 else 1 end
end missing_5_4,
case desc_identify 
when 4 then xml_value end id_4_4,
case desc_identify 
when 4 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3_4--,
--case when desc_identify in (1) then case when (select desc_identify from @xml_result where id = (xt.id+1)) = ff then 0 else 1 end
--end missing_2
from @xml_result xt
union
select 10000, xml_value, identify, desc_identify, ,,,,,,,,,,,,--,
from @xml_result 
where id = 1)a
order by id
end
if @print = 3
begin

select @xmlrecord = isnull(@xmlrecord,) + char(10) + case when id = 10000 then  else    end +
xmlrecord
from (
select id, 
case 
when id = 1 then <+xml_value+case when (select id from @xml_result where xml_value = id and id < 8) = 2 then  +col_id+ xml:space="preserve" else  xml:space="preserve" +col_id end +>
when id = 10000 then </+xml_value+>
when desc_identify = 2  then <+col_id+>+xml_value+</+col_id+>
when desc_identify = 5  then <+col_id+ +isnull(id_3+="+id_4+",)+ +isnull(id_33+="+id_44+",)+>+xml_value+</+col_id+>
when missing_5 = 0      then <+col_id+ +isnull(id_3_7+="+id_4_7+",)+ +isnull(id_33_7+="+id_44_7+",)+/>
when missing_5_4 = 0    then <+col_id+ +isnull(id_3_4+="+id_4_4+",)+/>
end xmlrecord
from (
select
id, xml_value, identify, desc_identify, 
case 
when id = 1			   then id="+(select xml_value from @xml_result where id in (select id + 1 from @xml_result where xml_value = id and id < 8))+"
when desc_identify = 1 then 
when desc_identify = 2 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 3 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 4 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 5 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 6 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
when desc_identify = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 1))
end col_id,
case desc_identify 
when 5 then (select xml_value from @xml_result where id in (isnull((select max(id) id from @xml_result where id < xt.id and desc_identify = 4),(select max(id) id from @xml_result where id < xt.id and desc_identify = 2))))
end id_4,
case desc_identify 
when 5 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3,
case when desc_identify = 5 and (select desc_identify from @xml_result where id = (xt.id-1)) = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where desc_identify = 6))
end id_33,
case when desc_identify = 5 then (select xml_value from @xml_result where id = (xt.id-1) and desc_identify = 7)
end id_44,
case when desc_identify in (7) then case when (select desc_identify from @xml_result where id = (xt.id+1)) != 5 then 0 else 1 end
end missing_5,
case desc_identify 
when 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 4))
end id_4_7,
case desc_identify 
when 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3_7,
case when desc_identify = 7 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where desc_identify = 6))
end id_33_7,
case when desc_identify = 7 then xml_value 
end id_44_7,
case when desc_identify in (4) then case when (select desc_identify from @xml_result where id = (xt.id+1)) not in (5,6,7) then 0 else 1 end
end missing_5_4,
case desc_identify 
when 4 then xml_value end id_4_4,
case desc_identify 
when 4 then (select xml_value from @xml_result where id in (select max(id) id from @xml_result where id < xt.id and desc_identify = 3))
end id_3_4
from @xml_result xt
union
select 10000, xml_value, identify, desc_identify, ,,,,,,,,,,,,
from @xml_result 
where id = 1)a
where (id not in (2,3,4,5,6)
and desc_identify not in (1,3,4,6,7)
or missing_5 = 0
or missing_5_4 = 0)
)a
where xmlrecord is not null
order by id

select cast(@xmlrecord as xml)
end
--set nocount off
